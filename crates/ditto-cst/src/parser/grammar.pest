module = { SOI ~ module_header ~ module_import* ~ module_declaration* ~ LINE_COMMENT* ~ EOI }

// -----------------------------------------------------------------------------
// Standalone parsers (a.k.a partials)

module_header_only = _ { SOI ~ module_header }

module_header_and_imports = _ { SOI ~ module_header ~ module_import* }

module_import_only = _ { SOI ~ module_import ~ EOI }

module_declaration_value_only = _ { SOI ~ module_declaration_value ~ EOI }

module_declaration_type_only = _ { SOI ~ module_declaration_type ~ EOI }

module_declaration_foreign_value_only = _ { SOI ~ module_declaration_foreign_value ~ EOI }

type_only = _ { SOI ~ type_ ~ EOI }

expression_only = _ { SOI ~ expression ~ EOI }

name_only = _ { SOI ~ name ~ EOI }

unused_name_only = _ { SOI ~ unused_name ~ EOI }

proper_name_only = _ { SOI ~ proper_name ~ EOI }

package_name_only = _ { SOI ~ package_name ~ EOI }

module_name_only = _ { SOI ~ module_name ~ EOI }

qualified_name_only = _ { SOI ~ qualified_name ~ EOI }

qualified_proper_name_only = _ { SOI ~ qualified_proper_name ~ EOI }

// -----------------------------------------------------------------------------
// Module

module_header = { module_keyword ~ module_name ~ exports_keyword ~ module_exports ~ semicolon }

module_name = { (proper_name ~ dot)* ~ proper_name }

module_exports = { everything | module_exports_list }

module_exports_list = { open_paren ~ module_exports_list_item ~ (comma ~ module_exports_list_item)* ~ comma? ~ close_paren }

module_exports_list_item = _{ name | module_exports_list_item_type }

module_exports_list_item_type = { proper_name ~ everything? }

module_import = { import_keyword ~ module_import_package? ~ module_name ~ module_import_alias? ~ module_imports_list? ~ semicolon }

module_import_package = { open_paren ~ package_name ~ close_paren }

module_import_alias = { as_keyword ~ proper_name }

module_imports_list = { open_paren ~ module_imports_list_item ~ (comma ~ module_imports_list_item)* ~ comma? ~ close_paren }

module_imports_list_item = _{ name | module_imports_list_item_type }

module_imports_list_item_type = { proper_name ~ everything? }

everything = { open_paren ~ double_dot ~ close_paren }

exposing = _{ open_paren ~ (double_dot | exposing_list?) ~ close_paren }

exposing_list = _{ name ~ (comma ~ name)* ~ comma? }

module_declaration = _{ 
  module_declaration_type | module_declaration_value | module_declaration_foreign_value
}

module_declaration_value = { 
  name ~ type_annotation? ~ equals ~ expression ~ semicolon 
}

module_declaration_type = { 
  type_keyword ~ proper_name ~ module_declaration_type_variables? ~ 
  (equals ~ module_declaration_type_constructors)? ~   
  semicolon
}

module_declaration_type_variables = { open_paren ~ name ~ (comma ~ name)* ~ comma? ~ close_paren }

module_declaration_type_constructors = _ { module_declaration_type_constructor_head ~ module_declaration_type_constructor* }

module_declaration_type_constructor_head = { pipe? ~ proper_name ~ module_declaration_constructor_fields? }

module_declaration_type_constructor = { pipe ~ proper_name ~ module_declaration_constructor_fields? }

module_declaration_constructor_fields = { open_paren ~ type_ ~ (comma ~ type_)* ~ comma? ~ close_paren }

module_declaration_foreign_value = { foreign_keyword ~ name ~ type_annotation ~ semicolon }

// -----------------------------------------------------------------------------
// Types

type_ = _
  { type_function
  | type1
  }

type1 = _
  { type_parens
  | type_call
  | type_variable  
  | type_constructor
  }

type_parens = { open_paren ~ type_ ~ close_paren }

type_variable = { name }

type_constructor = { qualified_proper_name }

type_call = { type_call_function ~ type_call_arguments }

type_call_function = { type_constructor | type_variable }

type_call_arguments = { open_paren ~ type_ ~ (comma ~ type_)* ~ comma? ~ close_paren }

type_function = { type_function_parameters ~ right_arrow ~ type_ }

type_function_parameters = { open_paren ~ (type_ ~ (comma ~ type_)* ~ comma?)?  ~ close_paren }

type_annotation = { colon ~ type_ }

return_type_annotation = { colon ~ type1 } // used for function expressions only

// -----------------------------------------------------------------------------
// Expressions

expression = _ 
  { expression_function
  | expression_match
  | expression_effect
  | expression_if
  | expression_2
  }

expression_2 = _ 
  { expression_right_pipe
  | expression_1
  }

expression_1 = _ 
  { expression_call
  | expression_0
  }

expression_0 = _ 
  { expression_parens 
  | expression_constructor 
  | expression_true
  | expression_false
  | expression_unit
  // It's important that keyword expressions come before variable
  | expression_variable 
  | expression_array
  | expression_string
  | expression_float
  | expression_integer
  }

// Left-associative (so needs some left recursion hacking)
expression_right_pipe = { expression_1 ~ right_pizza ~ expression_1 ~ (right_pizza ~ expression_1)* }

expression_parens = { open_paren ~ expression ~ close_paren }

// No left recursion yet :(
// https://github.com/pest-parser/pest/pull/533
expression_call = { expression_0 ~ expression_call_arguments+   }

expression_call_arguments = { open_paren ~ (expression ~ (comma ~ expression)* ~ comma?)?  ~ close_paren }

expression_match = { match_keyword ~ expression ~ with_keyword ~ expression_match_arm+ }

expression_match_arm = { pipe ~ pattern ~ right_arrow ~ expression }

expression_effect = { do_keyword ~ open_brace ~ expression_effect_statement ~ close_brace }

expression_effect_statement = _
  { expression_effect_return
  | expression_effect_bind
  | expression_effect_expression
  }

expression_effect_return = { return_keyword ~ expression }

expression_effect_bind = { name ~ left_arrow ~ expression ~ semicolon ~ expression_effect_statement }

expression_effect_expression = { expression ~ (semicolon ~ expression_effect_statement)? }

expression_constructor = { qualified_proper_name }

expression_function = { expression_function_parameters ~ return_type_annotation? ~ right_arrow ~ expression }

expression_function_parameters = { open_paren ~ (expression_function_parameter ~ (comma ~ expression_function_parameter)* ~ comma?)?  ~ close_paren }

expression_function_parameter = { (name | unused_name) ~ type_annotation? }

expression_if = { if_keyword ~ expression ~ then_keyword ~ expression ~ else_keyword ~ expression }

expression_variable = { qualified_name }

expression_array = { open_bracket ~ (expression ~ (comma ~ expression)* ~ comma?)?  ~ close_bracket }

expression_string = { string_literal }

expression_float = { float_literal }

expression_integer = { integer_literal }

expression_true = { true_keyword }

expression_false = { false_keyword }

expression_unit = { unit_keyword }

pattern = 
  { pattern_constructor
  | pattern_variable
  }

pattern_constructor = { pattern_constructor_proper_name ~ pattern_constructor_arguments? }

pattern_constructor_proper_name = { qualified_proper_name }

pattern_constructor_arguments = { open_paren ~ (pattern ~ (comma ~ pattern)* ~ comma?)?  ~ close_paren }

pattern_variable = { name }

// -----------------------------------------------------------------------------
// Names

qualified_proper_name = _{ qualifier? ~ proper_name }

qualified_name = _{ qualifier? ~ name }

qualifier = { proper_name ~ dot }

// -----------------------------------------------------------------------------
// Token rules

name = ${ (WHITESPACE | LINE_COMMENT)* ~ NAME ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

unused_name = ${ (WHITESPACE | LINE_COMMENT)* ~ UNUSED_NAME ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

proper_name = ${ (WHITESPACE | LINE_COMMENT)* ~ PROPER_NAME ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

package_name = ${ (WHITESPACE | LINE_COMMENT)* ~ PACKAGE_NAME ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

integer_literal = ${ (WHITESPACE | LINE_COMMENT)* ~ INTEGER ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

float_literal = ${ (WHITESPACE | LINE_COMMENT)* ~ FLOAT ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

string_literal = ${ (WHITESPACE | LINE_COMMENT)* ~ STRING ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

true_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ TRUE_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

false_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ FALSE_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

unit_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ UNIT_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

if_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ IF_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

then_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ THEN_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

else_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ ELSE_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

module_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ MODULE_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

exports_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ EXPORTS_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

import_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ IMPORT_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

as_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ AS_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

type_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ TYPE_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

foreign_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ FOREIGN_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

match_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ MATCH_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

do_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ DO_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

return_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ RETURN_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

let_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ LET_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

with_keyword = ${ (WHITESPACE | LINE_COMMENT)* ~ WITH_KEYWORD ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

dot = ${ (WHITESPACE | LINE_COMMENT)* ~ DOT ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

pipe = ${ (WHITESPACE | LINE_COMMENT)* ~ PIPE ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

right_pizza = ${ (WHITESPACE | LINE_COMMENT)* ~ RIGHT_PIZZA ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

double_dot = ${ (WHITESPACE | LINE_COMMENT)* ~ DOUBLE_DOT ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

comma = ${ (WHITESPACE | LINE_COMMENT)* ~ COMMA ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

colon = ${ (WHITESPACE | LINE_COMMENT)* ~ COLON ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

semicolon = ${ (WHITESPACE | LINE_COMMENT)* ~ SEMICOLON ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

equals = ${ (WHITESPACE | LINE_COMMENT)* ~ EQUALS ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

right_arrow = ${ (WHITESPACE | LINE_COMMENT)* ~ RIGHT_ARROW ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

left_arrow = ${ (WHITESPACE | LINE_COMMENT)* ~ LEFT_ARROW ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

open_paren = ${ (WHITESPACE | LINE_COMMENT)* ~ OPEN_PAREN ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

close_paren = ${ (WHITESPACE | LINE_COMMENT)* ~ CLOSE_PAREN ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

open_bracket = ${ (WHITESPACE | LINE_COMMENT)* ~ OPEN_BRACKET ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

close_bracket = ${ (WHITESPACE | LINE_COMMENT)* ~ CLOSE_BRACKET ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

open_brace = ${ (WHITESPACE | LINE_COMMENT)* ~ OPEN_BRACE ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

close_brace = ${ (WHITESPACE | LINE_COMMENT)* ~ CLOSE_BRACE ~ HORIZONTAL_WHITESPACE? ~ LINE_COMMENT? }

// -----------------------------------------------------------------------------
// Atom rules (uppercase by convention)

NAME = @{ LOWERCASE_LETTER ~ (LETTER | ASCII_DIGIT | "_")* } 

// REVIEW: maybe this restriction on the second letter is too strict?
UNUSED_NAME = @{ "_" ~ (LOWERCASE_LETTER ~ (LETTER | ASCII_DIGIT | "_")*)? }

PROPER_NAME = @{ UPPERCASE_LETTER ~ (LETTER | ASCII_DIGIT | "_")* } 

PACKAGE_NAME = @{ LOWERCASE_LETTER ~ (LOWERCASE_LETTER | ASCII_DIGIT | "-")* } 

INTEGER = @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* } 

FLOAT = @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* ~ DOT ~ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* } 

STRING  = @{ DOUBLE_QUOTE ~ (!DOUBLE_QUOTE ~ ANY)* ~ DOUBLE_QUOTE } // TODO escapes (make it non-atomic)

TRUE_KEYWORD = { "true" }

FALSE_KEYWORD = { "false" }

UNIT_KEYWORD = { "unit" }

IF_KEYWORD = { "if" }

THEN_KEYWORD = { "then" }

ELSE_KEYWORD = { "else" }

MODULE_KEYWORD = { "module" }

EXPORTS_KEYWORD = { "exports" }

IMPORT_KEYWORD = { "import" }

AS_KEYWORD = { "as" }

TYPE_KEYWORD = { "type" }

FOREIGN_KEYWORD = { "foreign" }

MATCH_KEYWORD = { "match" }

DO_KEYWORD = { "do" }

RETURN_KEYWORD = { "return" }

LET_KEYWORD = { "let" }

WITH_KEYWORD = { "with" }

DOT = { "." }

PIPE = { "|" }

RIGHT_PIZZA = { "|>" }

DOUBLE_DOT = { ".." }

COMMA = { "," }

COLON = { ":" }

SEMICOLON = { ";" }

EQUALS = { "=" }

RIGHT_ARROW = { "->" }

LEFT_ARROW = { "<-" }

OPEN_PAREN = { "(" }

CLOSE_PAREN = { ")" }

OPEN_BRACKET = { "[" }

CLOSE_BRACKET = { "]" }

OPEN_BRACE = { "{" }

CLOSE_BRACE = { "}" }

DOUBLE_QUOTE = { "\"" }

// NOTE: we don't call this `COMMENT` because we don't want pest to automatically
// consume (and drop!) comments
LINE_COMMENT = @{ "--" ~ (!NEWLINE ~ ANY)* } // TODO unicode?

// -----------------------------------------------------------------------------
// Special rules names (see https://docs.rs/pest_derive/2.1.0/pest_derive/#whitespace-and-comment)

WHITESPACE = _{ (" " | "\t" | NEWLINE)+ } // TODO unicode?

HORIZONTAL_WHITESPACE = _{ (" " | "\t")+ } // TODO unicode?
