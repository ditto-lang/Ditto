module Test exports (..);

get_name = do {
    return "jane"
};

get_names = do {
    name <- get_name;
    another_name <- get_name;
    return [name, another_name]
};

effect_map = fn (effect_a: Effect(a), f: (a) -> b): Effect(b) -> do {
    a <- effect_a;
    return f(a)
};

type Result(a, e) = Ok(a) | Err(e);

always = fn (_a, b) -> b;

get_names_from_result = fn (res) -> do {
    get_name;
    match res with
    | Ok(a) -> always(a, get_names)
    | Err(e) -> always(e, get_names)
    end
};

type Wrapper(a) = Wrapped(a);

get_wrapped_five = do { 
    let five = 5;
    return Wrapped(five) 
};

get_five: Effect(Int) = do {
    wrapped_five <- get_wrapped_five;
    let Wrapped(_) = wrapped_five;
    let Wrapped(_) = wrapped_five;
    let Wrapped(five) = wrapped_five;
    return five
};

main : Effect(Unit) = do {
    effect_map(get_name, fn (name) -> unit)
};
